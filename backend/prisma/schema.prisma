generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserProfile {
  id            String         @id @default(uuid())
  email         String         @unique
  firstName     String         @map("first_name")
  lastName      String         @map("last_name")
  phone         String?
  dateOfBirth   DateTime?      @map("date_of_birth")
  avatar        String?
  role          UserRole       @default(customer)
  emailVerified Boolean        @default(false) @map("email_verified")
  isActive      Boolean        @default(true) @map("is_active")
  lastLoginAt   DateTime?      @map("last_login_at")
  createdAt     DateTime       @default(now()) @map("created_at")
  updatedAt     DateTime       @updatedAt @map("updated_at")
  orders        Order[]
  accounts      UserAccount[]
  addresses     UserAddress[]
  favorites     UserFavorite[]
  password      UserPassword?
  sessions      UserSession[]

  @@map("user_profiles")
}

model UserAccount {
  id                String       @id @default(uuid())
  userId            String       @map("user_id")
  provider          AuthProvider
  providerAccountId String       @map("provider_account_id")
  accessToken       String?      @map("access_token")
  refreshToken      String?      @map("refresh_token")
  tokenType         String?      @map("token_type")
  scope             String?
  idToken           String?      @map("id_token")
  expiresAt         DateTime?    @map("expires_at")
  createdAt         DateTime     @default(now()) @map("created_at")
  updatedAt         DateTime     @updatedAt @map("updated_at")
  user              UserProfile  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("user_accounts")
}

model UserSession {
  id           String      @id @default(uuid())
  userId       String      @map("user_id")
  sessionToken String      @unique @map("session_token")
  accessToken  String      @unique @map("access_token")
  refreshToken String?     @unique @map("refresh_token")
  expiresAt    DateTime    @map("expires_at")
  userAgent    String?     @map("user_agent")
  ipAddress    String?     @map("ip_address")
  isActive     Boolean     @default(true) @map("is_active")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")
  user         UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model UserPassword {
  id             String      @id @default(uuid())
  userId         String      @unique @map("user_id")
  passwordHash   String      @map("password_hash")
  salt           String?
  resetToken     String?     @unique @map("reset_token")
  resetExpiresAt DateTime?   @map("reset_expires_at")
  createdAt      DateTime    @default(now()) @map("created_at")
  updatedAt      DateTime    @updatedAt @map("updated_at")
  user           UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_passwords")
}

model UserAddress {
  id         String      @id @default(uuid())
  userId     String      @map("user_id")
  type       String      @default("shipping")
  firstName  String      @map("first_name")
  lastName   String      @map("last_name")
  company    String?
  address1   String      @map("address_1")
  address2   String?     @map("address_2")
  city       String
  state      String
  postalCode String      @map("postal_code")
  country    String      @default("PE")
  phone      String?
  isDefault  Boolean     @default(false) @map("is_default")
  createdAt  DateTime    @default(now()) @map("created_at")
  updatedAt  DateTime    @updatedAt @map("updated_at")
  orders     Order[]
  user       UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_addresses")
}

model Category {
  id          String    @id @default(uuid())
  name        String    @unique
  description String?
  slug        String    @unique
  image       String?
  isActive    Boolean   @default(true) @map("is_active")
  sortOrder   Int       @default(0) @map("sort_order")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  products    Product[]

  @@map("categories")
}

model Product {
  id            String             @id @default(uuid())
  categoryId    String             @map("category_id")
  name          String
  description   String?
  price         Decimal            @db.Decimal(10, 2)
  salePrice     Decimal?           @map("sale_price") @db.Decimal(10, 2)
  sku           String             @unique
  images        String[]           @default([])
  attributes    Json               @default("{}")
  isActive      Boolean            @default(true) @map("is_active")
  stockQuantity Int                @default(0) @map("stock_quantity")
  tags          String[]           @default([])
  rating        Decimal?           @db.Decimal(2, 1)
  reviewCount   Int                @default(0) @map("review_count")
  createdAt     DateTime           @default(now()) @map("created_at")
  updatedAt     DateTime           @updatedAt @map("updated_at")
  orderItems    OrderItem[]
  variants      ProductVariant[]
  category      Category           @relation(fields: [categoryId], references: [id])
  cartItems     ShoppingCartItem[]
  favorites     UserFavorite[]

  @@map("products")
}

model ProductVariant {
  id            String   @id @default(uuid())
  productId     String   @map("product_id")
  name          String
  price         Decimal  @db.Decimal(10, 2)
  sku           String   @unique
  stockQuantity Int      @default(0) @map("stock_quantity")
  attributes    Json     @default("{}")
  isActive      Boolean  @default(true) @map("is_active")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

model ShoppingCart {
  id        String             @id @default(uuid())
  userId    String?            @map("user_id")
  sessionId String?            @map("session_id")
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")
  items     ShoppingCartItem[]

  @@map("shopping_carts")
}

model ShoppingCartItem {
  id        String       @id @default(uuid())
  cartId    String       @map("cart_id")
  productId String       @map("product_id")
  quantity  Int          @default(1)
  price     Decimal      @db.Decimal(10, 2)
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")
  cart      ShoppingCart @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product      @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
  @@map("shopping_cart_items")
}

model UserFavorite {
  id        String      @id @default(uuid())
  userId    String      @map("user_id")
  productId String      @map("product_id")
  createdAt DateTime    @default(now()) @map("created_at")
  product   Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("user_favorites")
}

model Order {
  id                String          @id @default(uuid())
  userId            String          @map("user_id")
  orderNumber       String          @unique @map("order_number")
  status            OrderStatus     @default(pending)
  subtotal          Decimal         @db.Decimal(10, 2)
  taxAmount         Decimal         @default(0) @map("tax_amount") @db.Decimal(10, 2)
  shippingAmount    Decimal         @default(0) @map("shipping_amount") @db.Decimal(10, 2)
  discountAmount    Decimal         @default(0) @map("discount_amount") @db.Decimal(10, 2)
  totalAmount       Decimal         @map("total_amount") @db.Decimal(10, 2)
  currency          String          @default("PEN")
  shippingAddressId String?         @map("shipping_address_id")
  notes             String?
  createdAt         DateTime        @default(now()) @map("created_at")
  updatedAt         DateTime        @updatedAt @map("updated_at")
  items             OrderItem[]
  shippingAddress   UserAddress?    @relation(fields: [shippingAddressId], references: [id])
  user              UserProfile     @relation(fields: [userId], references: [id])
  paymentMethods    PaymentMethod[]

  @@map("orders")
}

model OrderItem {
  id         String   @id @default(uuid())
  orderId    String   @map("order_id")
  productId  String   @map("product_id")
  quantity   Int
  unitPrice  Decimal  @map("unit_price") @db.Decimal(10, 2)
  totalPrice Decimal  @map("total_price") @db.Decimal(10, 2)
  createdAt  DateTime @default(now()) @map("created_at")
  order      Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product    Product  @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model PaymentMethod {
  id            String            @id @default(uuid())
  orderId       String            @map("order_id")
  type          PaymentMethodType
  amount        Decimal           @db.Decimal(10, 2)
  status        String            @default("pending")
  transactionId String?           @map("transaction_id")
  metadata      Json              @default("{}")
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")
  order         Order             @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payment_methods")
}

model Image {
  id           String   @id @default(uuid())
  fileName     String   @map("file_name")
  originalName String   @map("original_name")
  mimeType     String   @map("mime_type")
  size         Int
  url          String
  bucket       String?
  path         String?
  entityType   String?  @map("entity_type")
  entityId     String?  @map("entity_id")
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("images")
}

enum UserRole {
  admin
  customer
  staff
}

enum OrderStatus {
  pending
  confirmed
  processing
  shipped
  delivered
  cancelled
  refunded
}

enum PaymentMethodType {
  credit_card
  debit_card
  paypal
  bank_transfer
  cash_on_delivery
}

enum AuthProvider {
  email
  google
  facebook
  apple
}
