# =====================================================
# PRODUCTS GRAPHQL OPERATIONS
# =====================================================
# Following Clean Architecture principles:
# - Single Responsibility: Product operations only
# - Interface Segregation: Specific operations for products
# - Dependency Inversion: Depends on backend schema

# =====================================================
# QUERIES
# =====================================================

# Get paginated products with filtering
query GetProducts($filter: ProductFilterInput, $pagination: PaginationInput) {
  products(filter: $filter, pagination: $pagination) {
    data {
      items {
        id
        name
        description
        price
        salePrice
        sku
        images
        attributes
        isActive
        stockQuantity
        tags
        rating
        reviewCount
        createdAt
        updatedAt
        # Computed fields
        currentPrice
        hasDiscount
        discountPercentage
        totalStock
        isInStock
        # Relations
        category {
          id
          name
          slug
          image
        }
        variants {
          id
          name
          price
          sku
          stockQuantity
          attributes
          isActive
          isInStock
        }
      }
      pagination {
        total
        limit
        offset
        hasMore
        currentPage
        totalPages
      }
    }
  }
}

# Get single product by ID
query GetProduct($id: ID!) {
  product(id: $id) {
    data {
      entity {
        id
        name
        description
        price
        salePrice
        sku
        images
        attributes
        isActive
        stockQuantity
        tags
        rating
        reviewCount
        createdAt
        updatedAt
        # Computed fields
        currentPrice
        hasDiscount
        discountPercentage
        totalStock
        isInStock
        # Relations
        category {
          id
          name
          slug
          image
        }
        variants {
          id
          name
          price
          sku
          stockQuantity
          attributes
          isActive
          isInStock
        }
        reviews {
          id
          rating
          title
          comment
          createdAt
          user {
            id
            firstName
            lastName
          }
        }
      }
    }
  }
}

# Get product by SKU
query GetProductBySku($sku: String!) {
  productBySku(sku: $sku) {
    data {
      entity {
        id
        name
        description
        price
        salePrice
        sku
        images
        attributes
        isActive
        stockQuantity
        tags
        rating
        reviewCount
        createdAt
        updatedAt
        # Computed fields
        currentPrice
        hasDiscount
        discountPercentage
        totalStock
        isInStock
        # Relations
        category {
          id
          name
          slug
          image
        }
        variants {
          id
          name
          price
          sku
          stockQuantity
          attributes
          isActive
          isInStock
        }
      }
    }
  }
}

# Search products
query SearchProducts($query: String!, $filter: ProductFilterInput, $pagination: PaginationInput) {
  searchProducts(query: $query, filter: $filter, pagination: $pagination) {
    products {
      id
      name
      description
      price
      salePrice
      sku
      images
      attributes
      isActive
      stockQuantity
      tags
      rating
      reviewCount
      createdAt
      updatedAt
      # Computed fields
      currentPrice
      hasDiscount
      discountPercentage
      totalStock
      isInStock
      # Relations
      category {
        id
        name
        slug
        image
      }
    }
    total
    hasMore
  }
}



# =====================================================
# MUTATIONS
# =====================================================

# Create new product
# Returns CreateProductResponse with nested data structure
mutation CreateProduct($input: CreateProductInput!) {
  createProduct(input: $input) {
    success
    message
    code
    timestamp
    data {
      entity {
        id
        name
        description
        price
        salePrice
        sku
        images
        attributes
        isActive
        stockQuantity
        tags
        rating
        reviewCount
        createdAt
        updatedAt
        # Computed fields
        currentPrice
        hasDiscount
        discountPercentage
        totalStock
        isInStock
        # Relations
        category {
          id
          name
          slug
          image
        }
      }
      id
      createdAt
    }
    metadata {
      requestId
      traceId
      duration
      timestamp
    }
  }
}

# Update existing product
# Returns UpdateProductResponse with nested data structure
mutation UpdateProduct($id: ID!, $input: UpdateProductInput!) {
  updateProduct(id: $id, input: $input) {
    success
    message
    code
    timestamp
    data {
      entity {
        id
        name
        description
        price
        salePrice
        sku
        images
        attributes
        isActive
        stockQuantity
        tags
        rating
        reviewCount
        createdAt
        updatedAt
        # Computed fields
        currentPrice
        hasDiscount
        discountPercentage
        totalStock
        isInStock
        # Relations
        category {
          id
          name
          slug
          image
        }
      }
      id
      updatedAt
      changes
    }
    metadata {
      requestId
      traceId
      duration
      timestamp
    }
  }
}

# Delete product
# Returns DeleteProductResponse with nested data structure
mutation DeleteProduct($id: ID!) {
  deleteProduct(id: $id) {
    success
    message
    code
    timestamp
    data {
      id
      deletedAt
      softDelete
    }
    metadata {
      requestId
      traceId
      duration
      timestamp
    }
  }
}

# Create product variant
mutation CreateProductVariant($input: CreateProductVariantInput!) {
  createProductVariant(input: $input) {
    id
    productId
    name
    price
    sku
    stockQuantity
    attributes
    isActive
    createdAt
    updatedAt
    # Computed fields
    isInStock
    # Relations
    product {
      id
      name
      sku
    }
  }
}

# Update product variant
mutation UpdateProductVariant($id: ID!, $input: UpdateProductVariantInput!) {
  updateProductVariant(id: $id, input: $input) {
    id
    productId
    name
    price
    sku
    stockQuantity
    attributes
    isActive
    createdAt
    updatedAt
    # Computed fields
    isInStock
    # Relations
    product {
      id
      name
      sku
    }
  }
}

# Delete product variant
mutation DeleteProductVariant($id: ID!) {
  deleteProductVariant(id: $id) {
    success
    message
  }
}

# Upload image
mutation UploadImage($file: Upload!, $entityId: String!, $entityType: String!) {
  uploadImage(file: $file, entityId: $entityId, entityType: $entityType) {
    success
    url
    filename
    message
  }
}
